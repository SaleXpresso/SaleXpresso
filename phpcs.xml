<?xml version="1.0"?>
<ruleset name="Innovizz Coding Standards">
	<description>PHPCS ruleset for Innovizz DevTeam.</description>
	
	<file>.</file>
	
	<!-- Excludes -->
	<exclude-pattern>tests/cli/</exclude-pattern>
	<exclude-pattern>includes/libraries/</exclude-pattern>
	<exclude-pattern>/tests/cli/</exclude-pattern>
	<exclude-pattern>gulpfile.js</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>**/index.php</exclude-pattern>
	
	<!-- CLI :: Args -->
	<arg name="extensions" value="php"/>
	
	<!-- Arguments: colors, show progress and show sniff name. -->
	<arg name="colors"/>
	<arg value="sp"/>
	
	<!-- Strip the file paths in reports down to the relevant bit. -->
	<arg name="basepath" value="./" />
	 <!-- Check up to 8 files simultaneously. -->
	<arg name="parallel" value="8" />
	
	<!-- Configs -->
	<!-- Minimum WP Version -->
	<config name="minimum_supported_wp_version" value="5.0" />
	<!-- Minimum PHP Version -->
	<!-- PHP 7.0 or higher (as WC Recommended PHP @https://docs.woocommerce.com/document/update-php-wordpress/). -->
	<config name="testVersion" value="7.0-" />
	
	
	<!-- Rules :: Coding Standards ðŸ˜Ž -->
	
	<rule ref="WordPress" />
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<exclude-pattern>dev*.php</exclude-pattern>
		<properties>
			<property name="prefixes" type="array">
				<element value="Sale"/>
				<element value="sxp_"/>
				<element value="SXP_"/>
				<element value="SALES_XPRESSO_"/>
				<element value="saleXpresso_"/>
				<element value="before_salexpresso_"/>
				<element value="after_salexpresso_"/>
			</property>
		</properties>
	</rule>
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array" value="salexpresso" />
		</properties>
	</rule>
	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<exclude-pattern>includes/**/abstract-*.php</exclude-pattern>
		<exclude-pattern>tests/*</exclude-pattern>
		<exclude-pattern>src/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>languages/</exclude-pattern>
		<exclude-pattern>i18n/</exclude-pattern>
		<exclude-pattern>src/</exclude-pattern>
	</rule>
	<rule ref="WordPress.PHP.DevelopmentFunctions">
		<properties>
			<property name="group" type="array" value="error_log">
				<element value="dd" />
			</property>
		</properties>
	</rule>
<!--	For later use -->
<!--	<rule ref="WordPress.Security.ValidatedSanitizedInput">-->
<!--		<properties>-->
<!--			<property name="customSanitizingFunctions" type="array" value="comma-separated-list" />-->
<!--		</properties>-->
<!--	</rule>-->
<!--	<rule ref="WordPress.Security.EscapeOutput">-->
<!--		<properties>-->
<!--			<property name="customEscapingFunctions" type="array" value="comma-separated-list" />-->
<!--		</properties>-->
<!--	</rule>-->
	<rule ref="WordPress-Core" />
	<rule ref="WordPress-Extra" />
	<!-- WordPress VIP (This is must. Plugin must be pass https://wpvip.com/ PHPCS validation test) -->
	<rule ref="WordPress-VIP-Go" />
	
	<!-- Other Rules -->
	<rule ref="PHPCompatibilityWP"/>
	<rule ref="PHPCompatibility">
		<!-- Marked some internal method with DoubleUnderscore before method name -->
		<exclude name="PHPCompatibility.FunctionNameRestrictions.ReservedFunctionNames.MethodDoubleUnderscore"/>
	</rule>
	
	<!-- And the WC Rules -->
	<!-- <rule ref="WooCommerce-Core" /> <- composer installation failed [woocommerce/woocommerce-sniffs] -->
	<!-- Also don't need to include as it disable some core & security sniff we will handle here on our own -->
	<!-- https://github.com/woocommerce/woocommerce-sniffs/blob/master/src/WooCommerce-Core/ruleset.xml -->
	
	<!-- Allow embedded php tag same line -->
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentAfterOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentBeforeOpen">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentBeforeEnd">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.PHP.EmbeddedPhp.ContentAfterEnd">
		<severity>0</severity>
	</rule>
	<!-- PHP keywords MUST be in lower case. -->
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	
	<!-- Visibility MUST be declared on all methods. -->
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
	
	<!-- Method names SHOULD NOT be prefixed with a single underscore to indicate protected or private visibility. -->
	<!-- checked in Methods/MethodDeclarationSniff -->
	<!-- Method names MUST NOT be declared with a space after the method name.
	The opening brace MUST go on its own line, and the closing brace MUST go
	on the next line following the body. There MUST NOT be a space after the
	opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
	<!-- checked in Methods/FunctionClosingBraceSniff -->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>
	
	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
		<severity>0</severity>
	</rule>
	
	<!-- Argument lists MAY be split across multiple lines, where each subsequent
	line is indented once. When doing so, the first item in the list MUST be on
	the next line, and there MUST be only one argument per line. When the argument
	list is split across multiple lines, the closing parenthesis and opening brace
	MUST be placed together on their own line with one space between them. -->
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
		<!-- But Brace should be on the same line as WordPress requires
		it to be on the same line WordPress.WhiteSpace.ControlStructureSpacing.ExtraSpaceAfterCloseParenthesis -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
	</rule>
	
	<!-- There MUST NOT be more than one statement per line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	
	<!-- Code MUST use an indent of 4 spaces -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="ignoreIndentationTokens" type="array">
				<element value="T_COMMENT"/>
				<element value="T_DOC_COMMENT_OPEN_TAG"/>
			</property>
		</properties>
		<exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect"/>
	</rule>
	
	<!-- The body of each structure MUST be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the body. -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	
	<!-- Method arguments with default values MUST go at the end of the argument list. -->
	<rule ref="PEAR.Functions.ValidDefaultValue"/>
	
	<rule ref="PEAR">
		<exclude-pattern>.</exclude-pattern>
		<exclude name="PEAR.ControlStructures.MultiLineCondition.SpacingAfterOpenBrace"/>
		<exclude name="PEAR.Commenting.FileComment"/>
	</rule>
	
	<!-- When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.
   Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line. -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
		<severity>0</severity>
	</rule>
	<rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
		<severity>0</severity>
	</rule>
	
	<!-- Control Structures -->
	
	<!-- The general style rules for control structures are as follows:
	There MUST be one space after the control structure keyword
	There MUST NOT be a space after the opening parenthesis
	There MUST NOT be a space before the closing parenthesis
	There MUST be one space between the closing parenthesis and the opening brace
	The structure body MUST be indented once
	The closing brace MUST be on the next line after the body -->
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen" />
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose" />
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<!-- checked in ControlStructures/ControlStructureSpacingSniff -->
	
	<!-- The body of each structure MUST be enclosed by braces. This standardizes
	how the structures look, and reduces the likelihood of introducing errors as
	new lines get added to the body. -->
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	
	<!-- Require 1 space char after type casting -->
	<rule ref="Generic.Formatting.SpaceAfterCast">
		<properties>
			<property name="spacing" value="1" />
		</properties>
	</rule>
	
	<rule ref="Generic.Commenting">
		<exclude-pattern>tests/</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.Todo">
		<exclude-pattern>*</exclude-pattern>
	</rule>
	
	<rule ref="PEAR.Functions.FunctionCallSignature.EmptyLine">
		<exclude-pattern>tests/e2e-tests/</exclude-pattern>
	</rule>
	
	<rule ref="Generic.Files.LineLength">
		<!-- The soft limit on line length MUST be 120 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>
	
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>
	<rule ref="Generic.Arrays.DisallowShortArraySyntax">
		<exclude-pattern>.</exclude-pattern>
	</rule>
</ruleset>
